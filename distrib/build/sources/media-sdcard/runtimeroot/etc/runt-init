#!/bin/bash

CLS="\033[0;0f\033[2J"
BO="\033[1m"
UL="\033[4m"
BOUL="\033[1;4m"
NO="\033[0m"

/sbin/depmod -a

echo "Loading, please wait..."

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir -m 0777 /tmp
[ -d /run ] || mkdir -m 0755 /run
[ -d /var/lock ] || mkdir -p -m 755 /var/lock

# Mount proc, sys, dev
echo "Mounting /proc, /sys"
/bin/mount -t proc proc /proc
/bin/mount -t sysfs sysfs /sys

echo "Mounting devtmpfs"
/bin/mount -t devtmpfs devtmpfs /dev
/bin/mkdir -p /dev/pts
/bin/mount -t devpts -o gid=5,mode=620 devpts /dev/pts

# Populating dev
echo "Starting eudev and Populating dev. Please be patient."
/sbin/udevd --daemon
/sbin/udevadm hwdb --update
/sbin/udevadm trigger
/sbin/udevadm settle --timeout=30 || echo "udevadm settle failed"

# Load any modules explicitly required
echo "Loading modules"
test -e /etc/modules && egrep -v "^$|^#" /etc/modules | while read a; do modprobe $a; done

# Brute-force create harddisk links if udev didn't;
echo "Checking for harddisk symlinks"  
typeset -i i; i=0
while [ ! -e "/dev/harddisk4" ]; do

  # Feedback after one second
  if [ $i -eq 10 ]; then
    echo "Waiting for storage to become ready..."
  fi

  # If the partition node is available but the harddisk symlink isn't,
  #   make all of the symlinks and bust out.
  if [ -e "/dev/mmcblk0p4" ]; then
    # Wait a /12 second, in case udev is about to do it
    sleep .5
    if [ ! -e "/dev/harddisk4" ]; then
	  echo "Make missing /dev/harddisk* symlinks to /dev/mmcblk0*"
	  ln -s -f /dev/mmcblk0 /dev/harddisk
	  for i in 1 2 3 4; do
		ln -s -f /dev/mmcblk0p$i /dev/harddisk$i
	  done
    fi
    # Either way, the symlink(s) now exist
    break;
  fi

  sleep .1
  i=i+1
  # 15 seconds should be plenty long enough for SCSI to come to life
  if [ $i -eq 150 ]; then
    echo "Could not find root storage device. Cannot boot!"
    sleep 2
    exit 1
  fi
done

# Switch to hard drive and start the system
echo "Switch to harddisk and start the system"
/bin/mount /harddisk -o ro

# Stop udevd; missed events will be caught later
udevadm control --exit

echo "1 4 1 7" >/proc/sys/kernel/printk

/bin/mount -n --move /dev /harddisk/dev

PNR="/etc/udev/rules.d/70-persistent-net.rules"
if [ -f "$PNR" ]; then
  cp "$PNR" /harddisk/dev
fi

# "UNK_SERIAL"
echo "Checking for UNK_SERIAL"
grep "UNK_SERIAL" /harddisk/etc/udev/rules.d/70-Smoothwall-custom-disk.rules
RC=$?  

if [ "$RC" = "0" ]; then
	echo "RC=0"
	echo "Adding Serial # to 70-Smoothwall-custom-disk.rules"
	/sbin/mount -n -o remount,rw /harddisk
	sdserial=`/sbin/udevadm info -q all -p /sys/class/block/mmcblk0|egrep -i "serial" | sed -e 's/.*=//'`
	echo "sdserial = ${sdserial}"
	sed -i /harddisk/etc/udev/rules.d/70-Smoothwall-custom-disk.rules -e "s/UNK_SERIAL/$sdserial/"
	cat /harddisk/etc/udev/rules.d/70-Smoothwall-custom-disk.rules
	echo "Rebooting"
	sleep 2
	/sbin/reboot -f
elif [ "$RC" = "1" ]; then
	echo "Serial # already in 70-Smoothwall-custom-disk.rules"
fi

/usr/lib/klibc/bin/nuke /dev
/bin/ln -s /harddisk/dev /dev

/bin/mount -n --move /sys /harddisk/sys
/bin/mount -n --move /proc /harddisk/proc

echo "Done with initrd, Starting system"
sleep 2

exec /usr/lib/klibc/bin/run-init /harddisk /sbin/init </harddisk/dev/console >/harddisk/dev/console 2>&1

