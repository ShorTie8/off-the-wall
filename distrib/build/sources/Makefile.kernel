# SmoothWall Build system.
#
# (c) SmoothWall Ltd 2005
#
# This code is distributed under the terms of the GPL v2.

export KERNEL_DIR = $(SOURCES_DIR)/linux$(KERNEL_TYPE)/linux

PACKAGE = linux$(KERNEL_TYPE)

COMPILER = /usr/bin/gcc

download:
	@$(DL_CMD) $(KERNEL_URL)

unpack: download
ifeq ($(mTUPLE),$(mARCH))
	@tar -xvf $(DOWNLOADS_DIR)/linux-$(K_RAW_VERSION).tar.xz
else ifeq ($(mTUPLE),$(filter $(mTUPLE),rpi2 rpi3))
	tar xf $(DOWNLOADS_DIR)/linux-$(KERNEL_COM).tar.gz
	mv linux-$(KERNEL_COM) linux-$(KERNEL_VER)
else ifeq ($(mTUPLE), ODROID-XU3)
	tar xf $(DOWNLOADS_DIR)/linux-$(KERNEL_COM).tar.gz
	mv linux-$(KERNEL_COM) linux-$(KERNEL_VER)
else
	echo "Unsupported Makefile-kernel untar"
	exit 76
endif


prepare: unpack
	rm -f linux
	ln -s linux-$(K_RAW_VERSION) linux

	make -C linux mrproper

ifeq ($(mTUPLE),$(mARCH))
	sed -e 's/^CONFIG_LOCALVERSION=.*$$/CONFIG_LOCALVERSION="$(KERNEL_TYPE)"/' ../linux.config$(KERNEL_TYPE)-$(mARCH) > linux/.config
else ifeq ($(mTUPLE),$(filter $(mTUPLE),rpi2 rpi3))
	cd linux-$(KERNEL_VER); make bcm2709_defconfig
else ifeq ($(mTUPLE), ODROID-XU3)
	cd linux-$(KERNEL_VER); make odroidxu3_defconfig
endif

	make -C linux CC=$(COMPILER) clean prepare


compile-kernel: prepare
ifeq ($(mTUPLE),$(mARCH))
	sed -e 's/^CONFIG_LOCALVERSION=.*$$/CONFIG_LOCALVERSION="$(KERNEL_TYPE)"/' ../linux.config$(KERNEL_TYPE)-$(mARCH) > linux/.config
else ifeq ($(mTUPLE),$(filter $(mTUPLE),rpi2 rpi3))
	echo + > linux/.scmversion
	cd linux; make bcm2709_defconfig
	#sed -e 's/CONFIG_USB_NET_SMSC95XX=y/CONFIG_USB_NET_SMSC95XX=m/' -i linux/.config
else ifeq ($(mTUPLE), ODROID-XU3)
	cd linux-$(KERNEL_VER); make odroidxu3_defconfig
endif

	make -C linux CC=$(COMPILER) clean
	make $(JOBS) V=1 -C linux CC=$(COMPILER) oldconfig
ifeq ($(mARCH),$(mTUPLE))
	make $(JOBS) V=1 -C linux CC=$(COMPILER) bzImage
else ifeq ($(mTUPLE),$(filter $(mTUPLE),rpi2 rpi3 ODROID-XU3))
	@echo; echo; echo "Make zImage"; echo
	make $(JOBS) V=1 -C linux CC=$(COMPILER) zImage
else
	echo "Unsupported kernel compile"
	exit 76
endif

	@echo; echo; echo "Make modules"; echo
	make $(JOBS) V=1 -C linux CC=$(COMPILER) modules

ifeq ($(mTUPLE),$(filter $(mTUPLE),rpi2 rpi3 ODROID-XU3))
	@echo; echo; echo "Make dtbs"; echo
	make $(JOBS) V=1 -C linux CC=$(COMPILER) dtbs
endif

package-kernel: compile-kernel
ifeq ($(mTUPLE),$(mARCH))
	mkdir -p $(PKG_ROOT)
	(cd $(PKG_ROOT); \
	make -C $(KERNEL_DIR) CC=$(COMPILER) INSTALL_MOD_PATH=$(PKG_ROOT) modules_install; \
	mkdir -p boot; \
	cp $(KERNEL_DIR)/arch/x86/boot/bzImage boot/vmlinuz-$(K_SWE_VERSION); \
	cp $(KERNEL_DIR)/System.map boot/System.map-$(K_SWE_VERSION); \
	rm -f lib/modules/$(K_SWE_VERSION)/build; \
	cp $(KERNEL_DIR)/.config $(SOURCES_DIR)/linux.config$(KERNEL_TYPE)-$(mARCH).new)

else ifeq ($(mTUPLE),$(filter $(mTUPLE),rpi2 rpi3))
	echo; echo "Make modules_install"; echo
	(cd $(PKG_ROOT); make -C $(KERNEL_DIR) CC=$(COMPILER) INSTALL_MOD_PATH=$(PKG_ROOT) modules_install)
	mkdir -vp $(PKG_ROOT)/boot/overlays
	echo; echo; echo "scripts/mkknlimg"; echo
	(cd $(KERNEL_DIR); scripts/mkknlimg arch/arm/boot/zImage $(KERNEL).img)
	cp -v $(KERNEL_DIR)/$(KERNEL).img $(PKG_ROOT)/boot/$(KERNEL).img
	cp -v $(KERNEL_DIR)/System.map $(PKG_ROOT)/boot/System.map-$(K_SWE_VERSION)
	cp -v $(KERNEL_DIR)/arch/arm/boot/dts/*.dtb $(PKG_ROOT)/boot
	cp -v $(KERNEL_DIR)/arch/arm/boot/dts/overlays/*.dtb* $(PKG_ROOT)/boot/overlays/
	cp -v $(KERNEL_DIR)/arch/arm/boot/dts/overlays/README $(PKG_ROOT)/boot/overlays/
	cp -v $(KERNEL_DIR)/.config $(SOURCES_DIR)/linux.config-$(mTUPLE).new

else ifeq ($(mTUPLE),ODROID-XU3)
	cd $(PKG_ROOT); make -C $(KERNEL_DIR) CC=$(COMPILER) INSTALL_MOD_PATH=$(PKG_ROOT) modules_install
	mkdir -vp $(PKG_ROOT)/boot
	cp -v $(KERNEL_DIR)/arch/arm/boot/zImage $(PKG_ROOT)/boot/vmlinuz-$(K_SWE_VERSION)
	cp -v $(KERNEL_DIR)/System.map $(PKG_ROOT)/boot/System.map-$(K_SWE_VERSION)
	cp -v $(KERNEL_DIR)/arch/arm/boot/dts/exynos5422-odroidxu3.dtb $(PKG_ROOT)/boot/exynos5422-odroidxu3.dtb
#	rm -f lib/modules/$(K_SWE_VERSION)/build; \
	cp $(KERNEL_DIR)/.config $(SOURCES_DIR)/linux.config-$(mTUPLE).new
else
	echo "Unsupported package-kernel"
	exit 76
endif
 


build-tarball: package-kernel $(PACKAGES)
	@(cd $(PKG_ROOT); \
	tar -zcvf $(TARGET_DIR)/smoothwall-$(PACKAGE).tar.gz .; \
	tar -xvf $(TARGET_DIR)/smoothwall-$(PACKAGE).tar.gz -C /);


clean:
	@echo -n " $(PACKAGE)"
	@rm -f linux
	@rm -rf linux-$(KERNEL_VER)
	@rm -rf $(FREESWAN_TYPE)-$(FREESWAN_VER)
	@rm -rf $(PKG_ROOT)


cleanall: clean build-tarball


all: build-tarball


packageinfo.html:
	@echo "<li><span style='font-size:large;'>$(PACKAGE) $(VERSION)</span><br>" >>/tmp/packageinfo.html
	@cp -avR $(DOWNLOADS_DIR)/linux-$(KERNEL_VER).tar.bz2 /tmp/downloads
	@echo "(<a href='downloads/linux-$(KERNEL_VER)'>Local mirror</a>)<br>" >>/tmp/packageinfo.html
