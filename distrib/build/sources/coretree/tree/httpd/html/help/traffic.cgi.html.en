<P><FONT SIZE='3'><B><U>QoS</U></B></FONT></P>

<p>
<b>Welcome to Linux Traffic Control</b>
</p>

<p>
I'll first introduce you to priorities, classes and certain exceptions to the
'norm' to give you an idea how the pieces fit together. Then you'll learn how
to set the only three values you need to in order to get QoS working 'out of
the box'.
</p>

<p>
I'll close with a 'theoretical analogy' that might make it easier to
understand just what Linux Traffic Control does. This analogy was large
borrowed from the original Express 3.0 QoS help page.
</p>

<p>
When traffic control (or QoS) is not enabled, the system deploys the
Stochastic Fair Queuing queuing discipline. By itself, this keeps traffic
flowing fairly smoothly. But, for example, should you find your VoIP calls
becoming erratic or your internet gaming suffering, enabling QoS should solve
the problem.
</p>

<p>
Limitations: Linux Traffic Control can only do so much. It cannot predictably
partition bandwidth and cannot limit individuals' bandwidth very well. But it
does enforce sharing and does repress bandwidth hogs reasonably well.
</p>


<p><u>Priorities</u></p>

<p>
The high priority and isochronous levels are both level 0. 'High' handles DNS
traffic by default. 'Isochronous' handles VoIP traffic. Because high priority
flows could starve those at lower priorities, you are strongly cautioned to
give only flows with limited bandwidth (like VoIP and DNS) high priority.
</p>

<p>
The normal priority level (level 1) handles the vast majority of traffic. This
is due, in part, to the difficulty of identifying different types of traffic
on today's internet. The concept of 'port as service' is fading. Many services
now operate over HTTP, they can't be identified without peering inside their
packets. SSL/TLS encryption also prevents identification. But your Smoothwall
has facilities to balance traffic without knowing what it is.
</p>

<p>
The low priority level (level 2) handles traffic that is almost utterly
insensitive to time constraints. Low priority traffic gets leftover bandwidth.
</p>

<p><u>Classes (Types) of Flows</u></p>

<p>
Each rule is a class (type) of flow. There are also classes for local
(internal) traffic, Firewall admin traffic, squid (proxy) traffic, and
small-ish packets.  With four exceptions, all classes with packets queued
share available bandwidth equally.  With the same four exceptions, each class
may use 100% of the available bandwidth when no other traffic is queued.  For
this reason, you should assign high or isochronous priority only to classes
you know with certainty will never use more than a small portion of bandwidth.
All classes other than VoIP and DNS can be assigned low priority as desired.
</p>

<p><u>Exceptions</u></p>

<p>
VoIP traffic gets a 64kb/s share of bandwidth and may use up to 128kb/s. This
guarantees that VoIP traffic will never hog the internet. DNS traffic gets a
10% share of bandwidth and may use up to 10% of the bandwidth; this, too,
prevents DNS (and other flows using port 53) from hogging the internet.
Packets less than 100 bytes or so have their own class; they receive the same
equal share as the classes in the previous paragraph, but are limited to 20%
of the available bandwidth.
</p>

<p>
Local traffic is a special case. It is all lumped together; it is assumed that
the SFQ queueing discipline will enforce bandwidth sharing. Local traffic
receives all of the 'internal' bandwidth less RED's download speed as its
share and may use 100% in the absence of traffic from RED.
</p>

<p><u>Set the Bit Rates</u></p>

<p>
In order for QoS to work, you must determine the maximum observed long-term
upload and download bit rates for your internet connection (RED). Ignore the
short high-speed burst many ISP's give to their customers; it causes more
problems than it's worth. Start a huge download (a few hundred MiB is good).
Go to the bandwidthbars UI page and observe RED's incoming rate; wait for the
high speed boost, if any, to end. Enter the displayed bit rate in the QoS
page's form as a plain, unadorned integer; e.g. 3600000, 34300000, 123000,
55400. <i>Remember that, in communication, multipliers are always decimal; 'k'
is 1000, 'M' is 1 000 000, and 'G' is 1 000 000 000.</i> Now start a large
upload and observe RED's outgoing bit rate. Wait for the 'courtesy burst' to
end and enter that value in the QoS form.
</p>

<p>
You must also enter the maximum observed maximum bit rates for each of your
network interfaces; they are rarely the NIC's advertised speed. For example,
most 100Mb/s NIC will max out at 90-95Mb/s on a Linux system. GigE NICs that
connect to a PCI slot should max out at 150-250Mb/s (the limit of the PCI
bus). GigE NICs that connect to PCI-E can top out at 600-960Mb/s. 10Mb/s NIC
may have a hard time getting over 8-9Mb/s. Every system is different; thus the
bit rates must be observed and manually entered. There are no predefined rates
to select. If you cannot transfer data fast enough to find the limit, use one
of the above 'defaults'; you can always adjust it later.
</p>

<p><u>Observe the Priorities</u></p>

<p>
The default priorities for the supplied rules should be adequate for most
users. Again, be very careful when changing the priorities; you can easily
starve many users of bandwidth.  Most traffic is in the normal priority
because most flows are of the 'unlimited' variety.  HTTP and email may be
bursty, but when they transfer files, they do so without limit. You'd think
SSH would be safe at high priority, right? Bzzzt. SSH file transfer (scp,
sftp) is unlimited and would starve other flows; git over ssh is also
unlimited. So be vewy, vewy caweful!
</p>

<p><u>End Notes</u></p>

<p>
Avoid the temptation to set the observed bit rates too high. Once outgoing
packets begin to pile up, it becomes very easy for any single flow to hog the
bandwidth, regardless of how QoS is configured.
</p>

<p>
The Voice over IP (VOIP) rule is special in that any traffic with the diffserv
'EF' option set will also be caught by this rule. Other, 'unlimited' traffic
might also have 'EF' option set. But this should be OK because isochronous
traffic cannot use more than 128kb/s of upload or download.
</p>

<p>
If you do not want any of the rules to be active then simply change the class
to '(disabled)' for that rule. Such traffic will go into the default class
(defined as 'Traffic that does not match the rules below....'
</p>


<p>
<b>Traffic Control Theory By Way of Analog</b>
</p>

<p>
Smoothwall is able to decide if some of the network traffic is more urgent
than others. Imagine your network connection is like a multilane freeway or
motorway. The faster the connection, the higher the speed limit.  However, a
motorway is not very fast if every everyone in the land tries to get on and
off the road at the same time.
</p>

<p>
Enabling QoS is like enforcing traffic regulations and civility. Police, fire,
ambulance and government bigwigs have top priority. They get the highway to
themselves, but they rarely interfere with traffic because there aren't many
of them. Tremendously oversize vehicles and (in a perfect world) Sunday
drivers have the lowest priority, they must stay on the shoulder whenever
there is any higher priority traffic. The rest of the traffic shares the road
with smiling civility. In a perfect world. And even Linux Traffic Control is
imperfect.
</p>

<p>
Smoothwall QoS defines four 'priorities' of traffic, a number of types
(classes) of traffic, and enforces discipline on each motorway.
</p>

<p>
<u>Priorities</u>
</p>

<ul>
<li>
<b>low</b> - Sunday drivers; and oversize loads; can use 100% of the available
lanes but must stay on the shoulder when there is any higher priority traffic
on the road.
</li>
<li>
<b>normal</b> - most day-to-day traffic; can use 100% of the capacity of the
road when there is no higher priority traffic.
</li>
<li>
<b>high</b> - Akin to maintenance crews and roadside assistance. They only use
limited amounts of the capacity but take precedence over normal and low
priority traffic. It shares the road equally with 'isochronous' traffic.
</li>
<li>
<b>isochronous</b> - Akin to lawmakers going to and from their daily sessions.
It is regular, periodic traffic that is sensitive to interruptions.  It shares
the road equally with 'high' traffic.
</li>
</ul>

<p>
<u>Types (classes)</u>
</p>

<p>
In addition to priority levels, there are different type (classes) of
traffic.  You've seen a few already--Sunday drivers and oversize loads in low
priority; and police, fire, ambulance and bigwigs, maintenance crews and
roadside assistance in high priority. Normal priority traffic consists of
commuters, tourists, deliveries, couriers and long-haul commerce. Each of
these types of traffic can use 100% of the road's capacity when there is no
other traffic at their priority level and no higher priority traffic. When
there is other traffic at their priority level, all traffic shares the
bandwidth equally. For example, Sunday drivers and oversize loads get equal
time. But the Sunday drivers use most of the capacity at that priority because
there are few oversize loads. Likewise commuters, couriers, tourists and long
haul truckers share the capacity. But when there are only commuters, they get
to use the whole road.
</p>

<p>
<u>Disciplinarian (Mad Max/Dirty Harry)</u>
</p>

<p>
Finally, there is a last equalizer that smooths out traffic flows in each type
of traffic, enforcing discipline. For instance, there might be a convoy of
bully truckers from a single company hogging the motorway and driving slowly. 
The equalizer periodically puts them at the rear of the queue of traffic
behind them, thus opening the road to the rest of the traffic.
</p>
