#!/bin/sh

. /var/smoothwall/main/settings

. /var/smoothwall/ethernet/settings

export STARTSTOP="startup"

umask 022

echo "Setting hostname"
hostname $HOSTNAME

if [ "$KEYMAP" != "" ]; then
	loadkeys $KEYMAP
fi

PATH=/bin:/sbin:/usr/bin:/usr/sbin
export PATH

if [ -e /forcefsck ]; then FORCE=-f; fi

echo -n "Checking root filesystem: "

/sbin/fsck $FORCE -R -T -a -C /
RC=$?  

if [ "$RC" = "0" ]; then
	echo "Success"
elif [ "$RC" = "1" ]; then
	echo "Passed"
fi

# A return of 2 or higher means there were serious problems.
if [ $RC -gt 1 ]; then
	echo "  $STRING: Failed"
	echo "  *** An error occurred during the file system check."
	echo "  *** Dropping you to a shell; the system will reboot"
	echo "  *** when you leave the shell."
	export PS1="(Repair filesystem) \# # "
	sulogin
	echo "Unmounting filesystems"
	umount -a
	mount -n -o remount,ro /
	echo "Automatic reboot in progress."
	reboot -f
fi

echo "Mounting root read/write"
mount -n -o remount,rw /

# Are there one or more new NICs?
PNR="70-persistent-net.rules"
if [ -e /dev/${PNR} ]; then
  mv /dev/${PNR} /etc/udev/rules.d/${PNR}
fi

# Re-run udevd
/sbin/udevd --daemon
/sbin/udevadm trigger
/sbin/udevadm settle
/sbin/udevadm trigger --subsystem-match=block
/sbin/udevadm trigger --attr-match=modalias
/sbin/udevadm settle

echo "Relinking mtab"
rm -f /etc/mtab
ln -s /proc/mounts /etc/mtab

echo -n "Checking other filesystems: "
/sbin/fsck $FORCE -R -T -a -C -A
RC=$?  

if [ "$RC" = "0" ]; then
        echo "Success"
elif [ "$RC" = "1" ]; then
        echo "Passed"
fi
  
# A return of 2 or higher means there were serious problems.
if [ $RC -gt 1 ]; then
        echo "  $STRING: Failed"
        echo "  *** An error occurred during the file system check."
  	echo "  *** Dropping you to a shell; the system will reboot"
  	echo "  *** when you leave the shell."
  	export PS1="(Repair filesystem) \# # "
  	sulogin
  	echo "Unmounting filesystems"
  	umount -a
  	mount -n -o remount,ro /
	echo "Automatic reboot in progress."
  	reboot -f
fi

echo "Mounting other filesystems"
mount /boot
mount /var/log

# Deal with potentially changed NICs
/usr/sbin/compareMACs

echo "Directing core dumps to /var/log"
mkdir -p /var/log/coredumps
chmod 700 /var/log/coredumps
echo "/var/log/coredumps/%e-%t-%s.%p" >/proc/sys/kernel/core_pattern
echo "Turning on swap"
/sbin/swapon -a

echo "Module dependencies"
/sbin/depmod -a

echo "Clearing old files"
chmod 660 /dev/ttyS*
chmod 660 /dev/ttyI* >/dev/null 2>&1

# Let httpd (nobody) make atari sounds (for backup).
# It's write-only, so should be OK for now.
# But it really should use tty63, just so it's way out of the way.
chmod 622 /dev/tty13 >/dev/null 2>&1
chgrp nobody /dev/tty13 >/dev/null 2>&1

chmod 1777 /tmp
find /var/run -name '*.pid' -type f -exec rm -f '{}' \;
rm -f /var/lock/LCK..ttyS*
rm -f /var/run/pppd*.tdb

# Prepare red files
. /etc/rc.d/inc.clearRED

echo "Starting klogd"
/usr/sbin/klogd

if readlink /dev/harddisk | egrep "hd."; then
  echo "Setting IDE drive params"
  /sbin/hdparm -d 1 -c 1 -u 1 /dev/harddisk
fi

echo "Setting the clock"
/sbin/hwclock --hctosys --localtime

if [ ! -e /usr/etc/pango/pango.modules ]; then
	echo "Collecting pango modules"
        /usr/bin/pango-querymodules > /usr/etc/pango/pango.modules
fi

echo "Generating keys/certs..."
if [ ! -e /usr/etc/ssh_host_rsa_key ]; then
        echo "  SSH RSA key.  This may take several minutes."
	/usr/bin/ssh-keygen -t rsa -f /usr/etc/ssh_host_rsa_key -N ""
fi
if [ ! -e /usr/etc/ssh_host_dsa_key ]; then
        echo "  SSH DSA key.  This may take several minutes."
	/usr/bin/ssh-keygen -t dsa -f /usr/etc/ssh_host_dsa_key -N "" 
fi
if [ ! -e /usr/etc/ssh_host_ecdsa_key ]; then
        echo "  SSH ECDSA key.  This may take several minutes."
	/usr/bin/ssh-keygen -t ecdsa -f /usr/etc/ssh_host_ecdsa_key -N "" 
fi

if [ ! -e /etc/httpd/server.key ]; then
        echo "  https server key."
        /usr/bin/openssl genrsa -rand \
		/boot/vmlinuz-`uname -r`:/var/smoothwall/ethernet/settings:/var/log/dmesg -out \
		/etc/httpd/server.key 1024
        echo "  CSR"
        sed -e "6 s/Smoothwall/$HOSTNAME/" /etc/certparams | /usr/bin/openssl \
		req -new -key /etc/httpd/server.key -out /etc/httpd/server.csr
        echo "  Signing certificate"
	/usr/bin/openssl x509 -req -days 999999 -in \
		/etc/httpd/server.csr -signkey /etc/httpd/server.key -out \
		/etc/httpd/server.crt
fi	

echo "Hashing CA certs"
/usr/bin/c_rehash >/dev/null

echo "Generating UPNP UUID"
/usr/bin/uuidgen >/etc/miniupnpd.uuid

echo "Starting syslogd"
/usr/sbin/syslogd -m 0

echo "Loading filesystems"
/sbin/modprobe msdos
/sbin/modprobe vfat
/sbin/modprobe nls_cp437
# Adapted from Steve McNeill's ModInstall
echo "Loading mods' modules"
# if any; limited to .../mods/*/etc/rc.d
shopt -s nullglob
for i in /var/smoothwall/mods/*/etc/rc.d/0[0-9]rc.sysinit; do
  $i
done
shopt -u nullglob

echo "Loading IPSEC"
/sbin/modprobe ipsec

echo "Starting smoothd"
/usr/sbin/smoothd

echo "Rotating logs"
/usr/sbin/logrotate /etc/logrotate.conf
# Adapted from Steve McNeill's ModInstall
# and mods' log files, if any
find /var/smoothwall/mods/*/etc/logrotate.d -type f 2>/dev/null | while read i; do
  /usr/sbin/logrotate "$i"
done

echo
echo "Initializing  networking"
. /etc/rc.d/rc.network

echo
echo "Starting services and daemons"
echo "  cron"
rm -f /var/run/crond.reboot
/usr/sbin/cron
echo "  httpd"
/usr/sbin/httpd -DSSL
echo "  sshd (if enabled)"
/usr/bin/smoothcom sshdrestart
echo "  IMSpector (if enabled)"
/usr/bin/smoothcom imrestart
echo "  SIP proxy (if enabled)"
/usr/bin/smoothcom siprestart
echo "  Clam Anti-Virus (if enabled)"
/usr/bin/smoothcom clamavrestart
echo "  POP3 scanner (if enabled)"
/usr/bin/smoothcom p3scanrestart
#echo "  Guardian (if enabled)"
#/usr/bin/smoothcom guardianrestart

# Adapted from Steve McNeill's ModInstall
echo "Running mods' run level scripts"
# if any; limited to .../mods/*/etc/rc.d
shopt -s nullglob
for i in /var/smoothwall/mods/*/etc/rc.d/[1-9][0-9]rc.sysinit; do
  $i;
done
shopt -u nullglob

echo
echo "Finishing startup"
echo "  Silencing kernel, syslog output on tty12"
echo "    View the log files in /var/log to trace errors."
echo "1 4 1 7" >/proc/sys/kernel/printk

# Remove the policing barricades (delete the ingress qdiscs)
. /etc/rc.d/inc.open-ingress
# Up the links!
. /etc/rc.d/inc.links-up
# Restart TC in case it uses ingress policers
/usr/bin/smoothcom trafficrestart

# Services here depend on the IFs being up.

# ntpdate depends on dnsmasq resolving. So wait for it.
# This solves a problem when RED is static; the NICs are brought up in the
#   background, but not fast enough. This could fail if RED is ppp; so only
#   wait up to three seconds, then let ntpdate kvetch.
typeset -i i; i=0
while [ $i -lt 15 ]; do
  ps -ef | grep "/usr/bin/\dnsmasq" >/dev/null 2>&1
  case $? in
    0) break;;
    *) echo -e -n "o"; sleep .1; echo -e -n " "; sleep .1;;
  esac
  i=i+1
done
echo "  time service (if enabled)"
ntpdate pool.ntp.org
/sbin/hwclock --systohc --localtime
/usr/bin/smoothcom ntpdrestart
echo "  dhcpd (if enabled)"
/usr/bin/smoothcom dhcpdrestart
echo "  squid (if enabled)"
/usr/bin/smoothcom squidrestart

#echo "  ntop"
#/usr/bin/ntop -w 8080 -i eth0 -a /usr/var/ntop/access_log -m "$GREEN_NETWORK/$GREEN_NETMASK" -n 2 --w3c -d -L --skip-version-check --known-networks=$RED_NETWORK/$RED_NETMASK

# Final startup steps.
echo "  Saving dmesg buffer to /var/log/dmesg"
dmesg >/var/log/dmesg

logger -t smoothwall "Smoothwall started."

/usr/bin/sounds/startupsound

unset STARTSTOP

# Start a shutdown daemon that waits for the power button to be pressed
/usr/bin/smoothwall/powerButton.pl&
