# Handle I/O redirection sanely.
export BUILD_IN := $(shell if test -t 0; then echo "/proc/self/fd/0"; else echo "/dev/null"; fi)
export BUILD_OUT := $(shell if test -t 0; then echo "/proc/self/fd/0"; else echo "crumbs/build-progress.out"; fi)

# If desired, build with db in mind; else just optimize.
ifeq ($(GLOBALDEBUG), ON)
export OPT_FLAGS = -g -O0
else
export OPT_FLAGS = -O2
endif

# There are some contortions here. But the ARCH must be set early so the build
#   environment is correctly set and passed to all subprocedures.

# Define the preferred x86 ARCHs. Change ARCH32 as desired
export ARCH32 = i586
export ARCH64 = x86_64

# What ARCH do we seem to be?
ifndef mARCH
export mARCH = $(shell uname -m | sed -e 's/i.86/$(ARCH32)/')
endif

# See what we can build; that is, see if the chosen mARCH is possible.
# If building on a multilib host, both will be zero. If building on pure i686
# CANx86_64 will be non-zero. If building on pure 64-bit, CANi686
# should be non-zero.
export ARCHset =
CANx86_64 = $(shell setarch x86_64 sh -c "exit" 2>/dev/null; echo $$?)
CANi686 = $(shell setarch i686 sh -c "exit" 2>/dev/null; echo $$?)

# Only ARCH32 and ARCH64 targets are supported (see above), but only on hosts
# that can build them.

ifeq ($(mARCH),$(ARCH64))
  export ARCH_OK = yes
  export BITS_64 = yes
  export SWE_TGT = $(mARCH)-linux-gnu
  export FINAL_TGT = $(mARCH)-linux-gnu
  export CFLAGS = $(OPT_FLAGS) -m64 -fPIC
  ifeq ($(CANx86_64), 0)
    export ARCHset = linux64
  endif
  # This is for building 32-bit grub with a cross-compiler
  # It isn't presently used, as we don't build a 32-bit env on 64-bit.
  export SWE32_TGT = $(ARCH32)-pc-linux-gnu
endif

ifeq ($(mARCH),$(ARCH32))
  export ARCH_OK = yes
  export BITS_32 = yes
  export SWE_TGT = $(mARCH)-pc-linux-gnu
  export FINAL_TGT = $(mARCH)-pc-linux-gnu
  export CFLAGS = $(OPT_FLAGS) -m32 -march=$(ARCH32) -mtune=generic
  ifeq ($(CANi686), 0)
    export ARCHset = linux32
  endif
endif

ifeq ($(ARCHset),)
  $(info Cannot build for architecture $(mARCH) on this host!)
  $(error FAIL)
endif
